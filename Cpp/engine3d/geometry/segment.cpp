// Class automatically generated by Dev-C++ New Class wizard

#include "segment.h" // class's header file
#include "base/pointer.h"

using namespace engine3d;

// class constructor
Segment::Segment(const Vector& rPoint1, const Vector& rPoint2) : Line(rPoint1, rPoint2)
{
	// insert your code here
}

// class destructor
Segment::~Segment()
{
	// insert your code here
}

bool Segment::Contains(const Vector& rPoint) const
{
    const Vector& diff = (rPoint - mPoint1);
    const Vector& unitDir = mDirection / mDirection.Length();
    if (unitDir * diff.DotProduct(unitDir) == diff) {
        if ((diff - mDirection).Length() <= mDirection.Length()) {
            return true;
        }
    }
    return false;
}

bool Segment::Crosses(const Line& rSegment) const
{
    // THIS MAY BE PROBLEMATIC!!!
    auto p_distance = GetDistance(rSegment).get();
    //---------------------------
    if (p_distance->mDirection.Length() != 0) {
        return false;
    }
    double length = mDirection.Length();
    if ((p_distance->mPoint1 - mPoint1).Length() > length || (p_distance->mPoint1 - mPoint2).Length() > length) {
        return false;
    }
    if (!rSegment.IsSegment()) {
        return true;
    }
    length = rSegment.mDirection.Length();
    if ((p_distance->mPoint2 - rSegment.mPoint1).Length() > length || (p_distance->mPoint2 - rSegment.mPoint2).Length() > length) {
        return false;
    }
    return true;
}
